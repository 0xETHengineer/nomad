// Code generated by protoc-gen-go. DO NOT EDIT.
// source: plugins/logging/proto/logging.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StartRequest struct {
	JobId                string   `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	AllocId              string   `protobuf:"bytes,2,opt,name=alloc_id,json=allocId,proto3" json:"alloc_id,omitempty"`
	GroupName            string   `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	TaskName             string   `protobuf:"bytes,4,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	LogDir               string   `protobuf:"bytes,5,opt,name=log_dir,json=logDir,proto3" json:"log_dir,omitempty"`
	StdoutFileName       string   `protobuf:"bytes,6,opt,name=stdout_file_name,json=stdoutFileName,proto3" json:"stdout_file_name,omitempty"`
	StderrFileName       string   `protobuf:"bytes,7,opt,name=stderr_file_name,json=stderrFileName,proto3" json:"stderr_file_name,omitempty"`
	StdoutFifo           string   `protobuf:"bytes,8,opt,name=stdout_fifo,json=stdoutFifo,proto3" json:"stdout_fifo,omitempty"`
	StderrFifo           string   `protobuf:"bytes,9,opt,name=stderr_fifo,json=stderrFifo,proto3" json:"stderr_fifo,omitempty"`
	MaxFiles             uint32   `protobuf:"varint,10,opt,name=max_files,json=maxFiles,proto3" json:"max_files,omitempty"`
	MaxFileSizeMb        uint32   `protobuf:"varint,11,opt,name=max_file_size_mb,json=maxFileSizeMb,proto3" json:"max_file_size_mb,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartRequest) Reset()         { *m = StartRequest{} }
func (m *StartRequest) String() string { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()    {}
func (*StartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f403bc0514b74a53, []int{0}
}

func (m *StartRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartRequest.Unmarshal(m, b)
}
func (m *StartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartRequest.Marshal(b, m, deterministic)
}
func (m *StartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartRequest.Merge(m, src)
}
func (m *StartRequest) XXX_Size() int {
	return xxx_messageInfo_StartRequest.Size(m)
}
func (m *StartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartRequest proto.InternalMessageInfo

func (m *StartRequest) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *StartRequest) GetAllocId() string {
	if m != nil {
		return m.AllocId
	}
	return ""
}

func (m *StartRequest) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *StartRequest) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *StartRequest) GetLogDir() string {
	if m != nil {
		return m.LogDir
	}
	return ""
}

func (m *StartRequest) GetStdoutFileName() string {
	if m != nil {
		return m.StdoutFileName
	}
	return ""
}

func (m *StartRequest) GetStderrFileName() string {
	if m != nil {
		return m.StderrFileName
	}
	return ""
}

func (m *StartRequest) GetStdoutFifo() string {
	if m != nil {
		return m.StdoutFifo
	}
	return ""
}

func (m *StartRequest) GetStderrFifo() string {
	if m != nil {
		return m.StderrFifo
	}
	return ""
}

func (m *StartRequest) GetMaxFiles() uint32 {
	if m != nil {
		return m.MaxFiles
	}
	return 0
}

func (m *StartRequest) GetMaxFileSizeMb() uint32 {
	if m != nil {
		return m.MaxFileSizeMb
	}
	return 0
}

type StartResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartResponse) Reset()         { *m = StartResponse{} }
func (m *StartResponse) String() string { return proto.CompactTextString(m) }
func (*StartResponse) ProtoMessage()    {}
func (*StartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f403bc0514b74a53, []int{1}
}

func (m *StartResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartResponse.Unmarshal(m, b)
}
func (m *StartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartResponse.Marshal(b, m, deterministic)
}
func (m *StartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartResponse.Merge(m, src)
}
func (m *StartResponse) XXX_Size() int {
	return xxx_messageInfo_StartResponse.Size(m)
}
func (m *StartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartResponse proto.InternalMessageInfo

type StopRequest struct {
	JobId                string   `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	AllocId              string   `protobuf:"bytes,2,opt,name=alloc_id,json=allocId,proto3" json:"alloc_id,omitempty"`
	GroupName            string   `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	TaskName             string   `protobuf:"bytes,4,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	LogDir               string   `protobuf:"bytes,5,opt,name=log_dir,json=logDir,proto3" json:"log_dir,omitempty"`
	StdoutFileName       string   `protobuf:"bytes,6,opt,name=stdout_file_name,json=stdoutFileName,proto3" json:"stdout_file_name,omitempty"`
	StderrFileName       string   `protobuf:"bytes,7,opt,name=stderr_file_name,json=stderrFileName,proto3" json:"stderr_file_name,omitempty"`
	StdoutFifo           string   `protobuf:"bytes,8,opt,name=stdout_fifo,json=stdoutFifo,proto3" json:"stdout_fifo,omitempty"`
	StderrFifo           string   `protobuf:"bytes,9,opt,name=stderr_fifo,json=stderrFifo,proto3" json:"stderr_fifo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopRequest) Reset()         { *m = StopRequest{} }
func (m *StopRequest) String() string { return proto.CompactTextString(m) }
func (*StopRequest) ProtoMessage()    {}
func (*StopRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f403bc0514b74a53, []int{2}
}

func (m *StopRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopRequest.Unmarshal(m, b)
}
func (m *StopRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopRequest.Marshal(b, m, deterministic)
}
func (m *StopRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopRequest.Merge(m, src)
}
func (m *StopRequest) XXX_Size() int {
	return xxx_messageInfo_StopRequest.Size(m)
}
func (m *StopRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopRequest proto.InternalMessageInfo

func (m *StopRequest) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *StopRequest) GetAllocId() string {
	if m != nil {
		return m.AllocId
	}
	return ""
}

func (m *StopRequest) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *StopRequest) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *StopRequest) GetLogDir() string {
	if m != nil {
		return m.LogDir
	}
	return ""
}

func (m *StopRequest) GetStdoutFileName() string {
	if m != nil {
		return m.StdoutFileName
	}
	return ""
}

func (m *StopRequest) GetStderrFileName() string {
	if m != nil {
		return m.StderrFileName
	}
	return ""
}

func (m *StopRequest) GetStdoutFifo() string {
	if m != nil {
		return m.StdoutFifo
	}
	return ""
}

func (m *StopRequest) GetStderrFifo() string {
	if m != nil {
		return m.StderrFifo
	}
	return ""
}

type StopResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopResponse) Reset()         { *m = StopResponse{} }
func (m *StopResponse) String() string { return proto.CompactTextString(m) }
func (*StopResponse) ProtoMessage()    {}
func (*StopResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f403bc0514b74a53, []int{3}
}

func (m *StopResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopResponse.Unmarshal(m, b)
}
func (m *StopResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopResponse.Marshal(b, m, deterministic)
}
func (m *StopResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopResponse.Merge(m, src)
}
func (m *StopResponse) XXX_Size() int {
	return xxx_messageInfo_StopResponse.Size(m)
}
func (m *StopResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StopResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StopResponse proto.InternalMessageInfo

// FingerprintRequest is used to get the capabilities of the logging plugin.
type FingerprintRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FingerprintRequest) Reset()         { *m = FingerprintRequest{} }
func (m *FingerprintRequest) String() string { return proto.CompactTextString(m) }
func (*FingerprintRequest) ProtoMessage()    {}
func (*FingerprintRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f403bc0514b74a53, []int{4}
}

func (m *FingerprintRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FingerprintRequest.Unmarshal(m, b)
}
func (m *FingerprintRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FingerprintRequest.Marshal(b, m, deterministic)
}
func (m *FingerprintRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FingerprintRequest.Merge(m, src)
}
func (m *FingerprintRequest) XXX_Size() int {
	return xxx_messageInfo_FingerprintRequest.Size(m)
}
func (m *FingerprintRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FingerprintRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FingerprintRequest proto.InternalMessageInfo

// FingerprintResponse returns the logging plugin's capabilities.
type FingerprintResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FingerprintResponse) Reset()         { *m = FingerprintResponse{} }
func (m *FingerprintResponse) String() string { return proto.CompactTextString(m) }
func (*FingerprintResponse) ProtoMessage()    {}
func (*FingerprintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f403bc0514b74a53, []int{5}
}

func (m *FingerprintResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FingerprintResponse.Unmarshal(m, b)
}
func (m *FingerprintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FingerprintResponse.Marshal(b, m, deterministic)
}
func (m *FingerprintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FingerprintResponse.Merge(m, src)
}
func (m *FingerprintResponse) XXX_Size() int {
	return xxx_messageInfo_FingerprintResponse.Size(m)
}
func (m *FingerprintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FingerprintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FingerprintResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*StartRequest)(nil), "hashicorp.nomad.plugins.logging.StartRequest")
	proto.RegisterType((*StartResponse)(nil), "hashicorp.nomad.plugins.logging.StartResponse")
	proto.RegisterType((*StopRequest)(nil), "hashicorp.nomad.plugins.logging.StopRequest")
	proto.RegisterType((*StopResponse)(nil), "hashicorp.nomad.plugins.logging.StopResponse")
	proto.RegisterType((*FingerprintRequest)(nil), "hashicorp.nomad.plugins.logging.FingerprintRequest")
	proto.RegisterType((*FingerprintResponse)(nil), "hashicorp.nomad.plugins.logging.FingerprintResponse")
}

func init() {
	proto.RegisterFile("plugins/logging/proto/logging.proto", fileDescriptor_f403bc0514b74a53)
}

var fileDescriptor_f403bc0514b74a53 = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x94, 0xcd, 0x6e, 0xd4, 0x30,
	0x10, 0xc7, 0xd9, 0xa5, 0xfb, 0x91, 0x09, 0x29, 0x95, 0xa1, 0x22, 0x2c, 0x42, 0xad, 0xc2, 0x81,
	0x3d, 0xd0, 0x14, 0x51, 0x9e, 0x00, 0xa1, 0x4a, 0x95, 0x00, 0xa1, 0xdd, 0x1b, 0x97, 0xc8, 0x69,
	0x1c, 0xaf, 0x8b, 0x93, 0x09, 0xb6, 0x23, 0x55, 0x15, 0x4f, 0xc4, 0x43, 0xf1, 0x0e, 0xbc, 0x01,
	0xca, 0xe4, 0x43, 0x8b, 0x38, 0xec, 0x72, 0xe7, 0x14, 0x79, 0xfe, 0xbf, 0x99, 0xb1, 0xe7, 0x23,
	0xf0, 0xa2, 0xd2, 0xb5, 0x54, 0xa5, 0x3d, 0xd7, 0x28, 0xa5, 0x2a, 0xe5, 0x79, 0x65, 0xd0, 0x61,
	0x7f, 0x8a, 0xe9, 0xc4, 0x4e, 0x36, 0xdc, 0x6e, 0xd4, 0x35, 0x9a, 0x2a, 0x2e, 0xb1, 0xe0, 0x59,
	0xdc, 0x39, 0xc5, 0x1d, 0x16, 0xfd, 0x1a, 0xc3, 0x83, 0xb5, 0xe3, 0xc6, 0xad, 0xc4, 0xb7, 0x5a,
	0x58, 0xc7, 0x8e, 0x61, 0x7a, 0x83, 0x69, 0xa2, 0xb2, 0x70, 0x74, 0x3a, 0x5a, 0x7a, 0xab, 0xc9,
	0x0d, 0xa6, 0x57, 0x19, 0x7b, 0x0a, 0x73, 0xae, 0x35, 0x5e, 0x37, 0xc2, 0x98, 0x84, 0x19, 0x9d,
	0xaf, 0x32, 0xf6, 0x1c, 0x40, 0x1a, 0xac, 0xab, 0xa4, 0xe4, 0x85, 0x08, 0xef, 0x93, 0xe8, 0x91,
	0xe5, 0x13, 0x2f, 0x04, 0x7b, 0x06, 0x9e, 0xe3, 0xf6, 0x6b, 0xab, 0x1e, 0x90, 0x3a, 0x6f, 0x0c,
	0x24, 0x3e, 0x81, 0x99, 0x46, 0x99, 0x64, 0xca, 0x84, 0x13, 0x92, 0xa6, 0x1a, 0xe5, 0x7b, 0x65,
	0xd8, 0x12, 0x8e, 0xac, 0xcb, 0xb0, 0x76, 0x49, 0xae, 0xb4, 0x68, 0x9d, 0xa7, 0x44, 0x1c, 0xb6,
	0xf6, 0x4b, 0xa5, 0x05, 0x85, 0x68, 0x49, 0x61, 0xcc, 0x16, 0x39, 0x1b, 0x48, 0x61, 0xcc, 0x40,
	0x9e, 0x80, 0x3f, 0xc4, 0xcc, 0x31, 0x9c, 0x13, 0x04, 0x7d, 0xb8, 0x1c, 0x3b, 0xa0, 0x0d, 0x95,
	0x63, 0xe8, 0x0d, 0x00, 0x45, 0xc9, 0xb1, 0x79, 0x4b, 0xc1, 0x6f, 0x29, 0x91, 0x0d, 0xe1, 0x74,
	0xb4, 0x0c, 0x56, 0xf3, 0x82, 0xdf, 0x36, 0x19, 0x2c, 0x7b, 0x09, 0x47, 0xbd, 0x98, 0x58, 0x75,
	0x27, 0x92, 0x22, 0x0d, 0x7d, 0x62, 0x82, 0x8e, 0x59, 0xab, 0x3b, 0xf1, 0x31, 0x8d, 0x1e, 0x42,
	0xd0, 0x95, 0xdc, 0x56, 0x58, 0x5a, 0x11, 0xfd, 0x18, 0x83, 0xbf, 0x76, 0x58, 0xfd, 0xef, 0xc1,
	0xee, 0x1e, 0x44, 0x87, 0xcd, 0xc0, 0x36, 0xb5, 0xea, 0x8a, 0xf7, 0x18, 0xd8, 0xa5, 0x2a, 0xa5,
	0x30, 0x95, 0x51, 0x65, 0x3f, 0xc6, 0xd1, 0x31, 0x3c, 0xfa, 0xc3, 0xda, 0xc2, 0x6f, 0x7e, 0x8e,
	0x21, 0xf8, 0xd0, 0x8e, 0xfe, 0x67, 0xda, 0x04, 0xb6, 0x81, 0x09, 0x35, 0x83, 0x9d, 0xc5, 0x3b,
	0x76, 0x25, 0xde, 0xde, 0x93, 0x45, 0xbc, 0x2f, 0xde, 0x5d, 0xf3, 0x1e, 0x13, 0x70, 0xd0, 0x5c,
	0x9c, 0xbd, 0xda, 0xc3, 0x73, 0x98, 0x85, 0xc5, 0xd9, 0x9e, 0xf4, 0x90, 0xe6, 0x3b, 0xf8, 0x5b,
	0x2f, 0x67, 0x17, 0x3b, 0xfd, 0xff, 0xae, 0xde, 0xe2, 0xed, 0xbf, 0x39, 0xf5, 0xb9, 0x5f, 0x8f,
	0xde, 0xcd, 0xbe, 0x4c, 0xe8, 0xcf, 0x93, 0x4e, 0xe9, 0x73, 0xf1, 0x3b, 0x00, 0x00, 0xff, 0xff,
	0x7a, 0xf9, 0xa9, 0xc8, 0xa7, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LoggingPluginClient is the client API for LoggingPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoggingPluginClient interface {
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// Fingerprint allows the logging plugin to return its capabilities and
	// acknowledge that it's ready to start log shipping. Right now this is empty
	// and will only be called once by the log plugin manager at startup, but
	// future versions may need to fingerprint periodically.
	Fingerprint(ctx context.Context, in *FingerprintRequest, opts ...grpc.CallOption) (LoggingPlugin_FingerprintClient, error)
}

type loggingPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewLoggingPluginClient(cc grpc.ClientConnInterface) LoggingPluginClient {
	return &loggingPluginClient{cc}
}

func (c *loggingPluginClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.nomad.plugins.logging.LoggingPlugin/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggingPluginClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.nomad.plugins.logging.LoggingPlugin/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggingPluginClient) Fingerprint(ctx context.Context, in *FingerprintRequest, opts ...grpc.CallOption) (LoggingPlugin_FingerprintClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LoggingPlugin_serviceDesc.Streams[0], "/hashicorp.nomad.plugins.logging.LoggingPlugin/Fingerprint", opts...)
	if err != nil {
		return nil, err
	}
	x := &loggingPluginFingerprintClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LoggingPlugin_FingerprintClient interface {
	Recv() (*FingerprintResponse, error)
	grpc.ClientStream
}

type loggingPluginFingerprintClient struct {
	grpc.ClientStream
}

func (x *loggingPluginFingerprintClient) Recv() (*FingerprintResponse, error) {
	m := new(FingerprintResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LoggingPluginServer is the server API for LoggingPlugin service.
type LoggingPluginServer interface {
	Start(context.Context, *StartRequest) (*StartResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// Fingerprint allows the logging plugin to return its capabilities and
	// acknowledge that it's ready to start log shipping. Right now this is empty
	// and will only be called once by the log plugin manager at startup, but
	// future versions may need to fingerprint periodically.
	Fingerprint(*FingerprintRequest, LoggingPlugin_FingerprintServer) error
}

// UnimplementedLoggingPluginServer can be embedded to have forward compatible implementations.
type UnimplementedLoggingPluginServer struct {
}

func (*UnimplementedLoggingPluginServer) Start(ctx context.Context, req *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedLoggingPluginServer) Stop(ctx context.Context, req *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedLoggingPluginServer) Fingerprint(req *FingerprintRequest, srv LoggingPlugin_FingerprintServer) error {
	return status.Errorf(codes.Unimplemented, "method Fingerprint not implemented")
}

func RegisterLoggingPluginServer(s *grpc.Server, srv LoggingPluginServer) {
	s.RegisterService(&_LoggingPlugin_serviceDesc, srv)
}

func _LoggingPlugin_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggingPluginServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.nomad.plugins.logging.LoggingPlugin/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggingPluginServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoggingPlugin_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggingPluginServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.nomad.plugins.logging.LoggingPlugin/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggingPluginServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoggingPlugin_Fingerprint_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FingerprintRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LoggingPluginServer).Fingerprint(m, &loggingPluginFingerprintServer{stream})
}

type LoggingPlugin_FingerprintServer interface {
	Send(*FingerprintResponse) error
	grpc.ServerStream
}

type loggingPluginFingerprintServer struct {
	grpc.ServerStream
}

func (x *loggingPluginFingerprintServer) Send(m *FingerprintResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _LoggingPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hashicorp.nomad.plugins.logging.LoggingPlugin",
	HandlerType: (*LoggingPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _LoggingPlugin_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _LoggingPlugin_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Fingerprint",
			Handler:       _LoggingPlugin_Fingerprint_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "plugins/logging/proto/logging.proto",
}
