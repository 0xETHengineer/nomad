// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nomad/stream/proto/subscribe.proto

package pbstream

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Topic int32

const (
	Topic_All        Topic = 0
	Topic_Deployment Topic = 1
	Topic_Evaluation Topic = 2
	Topic_Allocation Topic = 3
	Topic_Job        Topic = 4
	Topic_Node       Topic = 5
)

var Topic_name = map[int32]string{
	0: "All",
	1: "Deployment",
	2: "Evaluation",
	3: "Allocation",
	4: "Job",
	5: "Node",
}

var Topic_value = map[string]int32{
	"All":        0,
	"Deployment": 1,
	"Evaluation": 2,
	"Allocation": 3,
	"Job":        4,
	"Node":       5,
}

func (x Topic) String() string {
	return proto.EnumName(Topic_name, int32(x))
}

func (Topic) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1fbaa8c5f6fb9626, []int{0}
}

type TopicFilter struct {
	Topic                Topic    `protobuf:"varint,1,opt,name=Topic,proto3,enum=hashicorp.nomad.stream.proto.Topic" json:"Topic,omitempty"`
	FilterKeys           []string `protobuf:"bytes,2,rep,name=FilterKeys,proto3" json:"FilterKeys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicFilter) Reset()         { *m = TopicFilter{} }
func (m *TopicFilter) String() string { return proto.CompactTextString(m) }
func (*TopicFilter) ProtoMessage()    {}
func (*TopicFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fbaa8c5f6fb9626, []int{0}
}

func (m *TopicFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicFilter.Unmarshal(m, b)
}
func (m *TopicFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicFilter.Marshal(b, m, deterministic)
}
func (m *TopicFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicFilter.Merge(m, src)
}
func (m *TopicFilter) XXX_Size() int {
	return xxx_messageInfo_TopicFilter.Size(m)
}
func (m *TopicFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicFilter.DiscardUnknown(m)
}

var xxx_messageInfo_TopicFilter proto.InternalMessageInfo

func (m *TopicFilter) GetTopic() Topic {
	if m != nil {
		return m.Topic
	}
	return Topic_All
}

func (m *TopicFilter) GetFilterKeys() []string {
	if m != nil {
		return m.FilterKeys
	}
	return nil
}

type SubscribeRequest struct {
	Token                string         `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	Index                string         `protobuf:"bytes,2,opt,name=Index,proto3" json:"Index,omitempty"`
	Namespace            string         `protobuf:"bytes,3,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	Topics               []*TopicFilter `protobuf:"bytes,4,rep,name=Topics,proto3" json:"Topics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fbaa8c5f6fb9626, []int{1}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *SubscribeRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *SubscribeRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SubscribeRequest) GetTopics() []*TopicFilter {
	if m != nil {
		return m.Topics
	}
	return nil
}

type EventBatch struct {
	Index                uint64   `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Event                []*Event `protobuf:"bytes,2,rep,name=Event,proto3" json:"Event,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventBatch) Reset()         { *m = EventBatch{} }
func (m *EventBatch) String() string { return proto.CompactTextString(m) }
func (*EventBatch) ProtoMessage()    {}
func (*EventBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fbaa8c5f6fb9626, []int{2}
}

func (m *EventBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventBatch.Unmarshal(m, b)
}
func (m *EventBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventBatch.Marshal(b, m, deterministic)
}
func (m *EventBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBatch.Merge(m, src)
}
func (m *EventBatch) XXX_Size() int {
	return xxx_messageInfo_EventBatch.Size(m)
}
func (m *EventBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBatch.DiscardUnknown(m)
}

var xxx_messageInfo_EventBatch proto.InternalMessageInfo

func (m *EventBatch) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *EventBatch) GetEvent() []*Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type Event struct {
	Topic                Topic           `protobuf:"varint,1,opt,name=Topic,proto3,enum=hashicorp.nomad.stream.proto.Topic" json:"Topic,omitempty"`
	Type                 string          `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Key                  string          `protobuf:"bytes,3,opt,name=Key,proto3" json:"Key,omitempty"`
	Namespace            string          `protobuf:"bytes,4,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	FilterKeys           []string        `protobuf:"bytes,5,rep,name=FilterKeys,proto3" json:"FilterKeys,omitempty"`
	Index                uint64          `protobuf:"varint,6,opt,name=Index,proto3" json:"Index,omitempty"`
	Payload              *_struct.Struct `protobuf:"bytes,7,opt,name=Payload,proto3" json:"Payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fbaa8c5f6fb9626, []int{3}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetTopic() Topic {
	if m != nil {
		return m.Topic
	}
	return Topic_All
}

func (m *Event) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Event) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Event) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Event) GetFilterKeys() []string {
	if m != nil {
		return m.FilterKeys
	}
	return nil
}

func (m *Event) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Event) GetPayload() *_struct.Struct {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterEnum("hashicorp.nomad.stream.proto.Topic", Topic_name, Topic_value)
	proto.RegisterType((*TopicFilter)(nil), "hashicorp.nomad.stream.proto.TopicFilter")
	proto.RegisterType((*SubscribeRequest)(nil), "hashicorp.nomad.stream.proto.SubscribeRequest")
	proto.RegisterType((*EventBatch)(nil), "hashicorp.nomad.stream.proto.EventBatch")
	proto.RegisterType((*Event)(nil), "hashicorp.nomad.stream.proto.Event")
}

func init() {
	proto.RegisterFile("nomad/stream/proto/subscribe.proto", fileDescriptor_1fbaa8c5f6fb9626)
}

var fileDescriptor_1fbaa8c5f6fb9626 = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0xc1, 0x6a, 0xdb, 0x40,
	0x10, 0x8d, 0x2c, 0xd9, 0x8e, 0x47, 0x10, 0xc4, 0x52, 0xa8, 0x08, 0xa6, 0x18, 0xf5, 0xa2, 0xf6,
	0xb0, 0x6e, 0xdd, 0x53, 0x8e, 0x0e, 0x4d, 0xa1, 0x0d, 0x84, 0x22, 0xe7, 0x54, 0xe8, 0x61, 0x25,
	0x4f, 0x63, 0xd1, 0xb5, 0x56, 0xd5, 0xae, 0x42, 0xf4, 0x35, 0xfd, 0xc4, 0xfe, 0x42, 0xd9, 0x59,
	0xb9, 0x4e, 0x7c, 0x48, 0x03, 0xb9, 0xed, 0x9b, 0x7d, 0xb3, 0xfb, 0xe6, 0xcd, 0x83, 0xa4, 0x52,
	0x5b, 0xb1, 0x9e, 0x6b, 0xd3, 0xa0, 0xd8, 0xce, 0xeb, 0x46, 0x19, 0x35, 0xd7, 0x6d, 0xae, 0x8b,
	0xa6, 0xcc, 0x91, 0x13, 0x66, 0xd3, 0x8d, 0xd0, 0x9b, 0xb2, 0x50, 0x4d, 0xcd, 0x89, 0xcd, 0x1d,
	0xdb, 0xdd, 0x9e, 0x4e, 0x6f, 0x94, 0xba, 0x91, 0xe8, 0x7a, 0xf3, 0xf6, 0x87, 0x7d, 0xab, 0x2d,
	0x8c, 0xbb, 0x4d, 0x36, 0x10, 0x5e, 0xab, 0xba, 0x2c, 0x3e, 0x95, 0xd2, 0x60, 0xc3, 0xce, 0x60,
	0x48, 0x30, 0xf6, 0x66, 0x5e, 0x7a, 0xb2, 0x78, 0xcd, 0x1f, 0x7b, 0x9a, 0x13, 0x35, 0x73, 0x1d,
	0xec, 0x15, 0x80, 0x7b, 0xe4, 0x12, 0x3b, 0x1d, 0x0f, 0x66, 0x7e, 0x3a, 0xc9, 0xee, 0x55, 0x92,
	0xdf, 0x1e, 0x44, 0xab, 0x9d, 0xf2, 0x0c, 0x7f, 0xb5, 0xa8, 0x0d, 0x7b, 0x61, 0xff, 0xfb, 0x89,
	0x15, 0xfd, 0x37, 0xc9, 0x1c, 0xb0, 0xd5, 0xcf, 0xd5, 0x1a, 0xef, 0xe2, 0x81, 0xab, 0x12, 0x60,
	0x53, 0x98, 0x5c, 0x89, 0x2d, 0xea, 0x5a, 0x14, 0x18, 0xfb, 0x74, 0xb3, 0x2f, 0xb0, 0x25, 0x8c,
	0x48, 0x87, 0x8e, 0x83, 0x99, 0x9f, 0x86, 0x8b, 0x37, 0x4f, 0x90, 0xee, 0xd4, 0x65, 0x7d, 0x63,
	0xf2, 0x1d, 0xe0, 0xe2, 0x16, 0x2b, 0x73, 0x2e, 0x4c, 0xb1, 0xd9, 0x8b, 0xb0, 0xd2, 0x82, 0x9d,
	0x88, 0x33, 0x18, 0x12, 0x87, 0x06, 0x0c, 0xff, 0x67, 0x10, 0x51, 0x33, 0xd7, 0x91, 0xfc, 0xf1,
	0xfa, 0xde, 0xe7, 0xb8, 0xcc, 0x20, 0xb8, 0xee, 0x6a, 0xec, 0x9d, 0xa1, 0x33, 0x8b, 0xc0, 0xbf,
	0xc4, 0xae, 0xb7, 0xc4, 0x1e, 0x1f, 0x5a, 0x15, 0x1c, 0x5a, 0xf5, 0x70, 0x53, 0xc3, 0xc3, 0x4d,
	0xed, 0x27, 0x1f, 0xdd, 0x9f, 0xfc, 0x3d, 0x8c, 0xbf, 0x8a, 0x4e, 0x2a, 0xb1, 0x8e, 0xc7, 0x33,
	0x2f, 0x0d, 0x17, 0x2f, 0xb9, 0x4b, 0x16, 0xdf, 0x25, 0x8b, 0xaf, 0x28, 0x59, 0xd9, 0x8e, 0xf7,
	0x76, 0xd5, 0xcf, 0xc9, 0xc6, 0xe0, 0x2f, 0xa5, 0x8c, 0x8e, 0xd8, 0x09, 0xc0, 0x47, 0xac, 0xa5,
	0xea, 0xb6, 0x58, 0x99, 0xc8, 0xb3, 0xf8, 0xe2, 0x56, 0xc8, 0x56, 0x98, 0x52, 0x55, 0xd1, 0xc0,
	0xe2, 0xa5, 0x94, 0xaa, 0x70, 0xd8, 0xb7, 0x8d, 0x5f, 0x54, 0x1e, 0x05, 0xec, 0x18, 0x82, 0x2b,
	0xb5, 0xc6, 0x68, 0xb8, 0xb8, 0x83, 0x90, 0x5c, 0x5c, 0x91, 0x47, 0xac, 0x84, 0xc9, 0xbf, 0x54,
	0x31, 0xfe, 0xb8, 0x93, 0x87, 0xf1, 0x3b, 0x4d, 0x9f, 0xb0, 0x3e, 0x4a, 0x43, 0x72, 0xf4, 0xce,
	0x3b, 0x87, 0x6f, 0xc7, 0x75, 0xee, 0x08, 0xf9, 0x88, 0x18, 0x1f, 0xfe, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x35, 0xcb, 0x93, 0xc7, 0xa0, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventStreamClient is the client API for EventStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventStreamClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (EventStream_SubscribeClient, error)
}

type eventStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewEventStreamClient(cc grpc.ClientConnInterface) EventStreamClient {
	return &eventStreamClient{cc}
}

func (c *eventStreamClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (EventStream_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventStream_serviceDesc.Streams[0], "/hashicorp.nomad.stream.proto.EventStream/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventStreamSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventStream_SubscribeClient interface {
	Recv() (*EventBatch, error)
	grpc.ClientStream
}

type eventStreamSubscribeClient struct {
	grpc.ClientStream
}

func (x *eventStreamSubscribeClient) Recv() (*EventBatch, error) {
	m := new(EventBatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventStreamServer is the server API for EventStream service.
type EventStreamServer interface {
	Subscribe(*SubscribeRequest, EventStream_SubscribeServer) error
}

// UnimplementedEventStreamServer can be embedded to have forward compatible implementations.
type UnimplementedEventStreamServer struct {
}

func (*UnimplementedEventStreamServer) Subscribe(req *SubscribeRequest, srv EventStream_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterEventStreamServer(s *grpc.Server, srv EventStreamServer) {
	s.RegisterService(&_EventStream_serviceDesc, srv)
}

func _EventStream_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventStreamServer).Subscribe(m, &eventStreamSubscribeServer{stream})
}

type EventStream_SubscribeServer interface {
	Send(*EventBatch) error
	grpc.ServerStream
}

type eventStreamSubscribeServer struct {
	grpc.ServerStream
}

func (x *eventStreamSubscribeServer) Send(m *EventBatch) error {
	return x.ServerStream.SendMsg(m)
}

var _EventStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hashicorp.nomad.stream.proto.EventStream",
	HandlerType: (*EventStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _EventStream_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "nomad/stream/proto/subscribe.proto",
}
