components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-Nomad-Token
  parameters:
    AllParam:
      schema:
        type: integer
      description: Flag indicating whether to constrain by job creation index or not.
      name: all
      in: query
    IndexParam:
      schema:
        type: integer
      description: >-
        If set, wait until query exceeds given index. Must be provided with
        WaitParam.
      name: index
      in: query
    JobNameParam:
      schema:
        type: string
      description: The job identifier.
      name: jobName
      in: path
      required: true
    NamespaceParam:
      schema:
        type: string
      description: Filters results based on the specified namespace
      name: namespace
      in: query
    NextTokenParam:
      schema:
        type: string
      description: Indicates where to start paging for queries that support pagination
      name: next_token
      in: query
    PerPageParam:
      schema:
        type: integer
      description: Maximum number of results to return
      name: per_page
      in: query
    PrefixParam:
      schema:
        type: string
      description: Constrains results to jobs that start with the defined prefix
      name: prefix
      in: query
    RegionParam:
      schema:
        type: string
      description: Filters results based on the specified region
      name: region
      in: query
    StaleParam:
      schema:
        type: string
      description: If present, results will include stale reads
      name: stale
      in: query
    WaitParam:
      schema:
        type: integer
      description: Provided with IndexParam to wait for change
      name: wait
      in: query
    NomadTokenHeader:
      schema:
        type: string
      description: A Nomad ACL token
      name: X-Nomad-Token
      in: header
  headers:
    X-Nomad-Index:
      schema:
        type: integer
      description: >
        Endpoints that support blocking queries return an HTTP header named set
        this unique identifier representing the current state of the requested
        resource. On a new Nomad cluster the value of this index starts at 1.
    X-Nomad-Known-Leader:
      schema:
        type: boolean
      description: >
        Flag indicating the agent that fulfilled the request had known Raft
        leader at the time of the operation.
    X-Nomad-Last-Contact:
      schema:
        type: integer
      description: >
        If AllowStale is used, this is time elapsed since last contact between
        the follower and leader. This can be used to gauge staleness.
  responses:
    BadRequest:
      description: Bad request
    Forbidden:
      description: Forbidden
    InternalServerError:
      description: Internal server error
    MethodNotAllowed:
      description: Method not allowed
    NotFound:
      description: Not found
  schemas:
    Affinity:
      $ref: '#/components/schemas/Affinity'
    CSIMountOptions:
      properties:
        ExtraKeysHCL:
          items:
            type: string
          type: array
        FSType:
          type: string
        MountFlags:
          items:
            type: string
          type: array
      type: object
    CSIPluginType:
      type: string
    CheckRestart:
      properties:
        IgnoreWarnings:
          type: boolean
        Limit:
          type: integer
      type: object
    Constraint:
      $ref: '#/components/schemas/Constraint'
    Consul:
      properties:
        Namespace:
          type: string
      type: object
    ConsulConnect:
      properties:
        Gateway:
          $ref: '#/components/schemas/ConsulGateway'
        Native:
          type: boolean
        SidecarService:
          $ref: '#/components/schemas/ConsulSidecarService'
        SidecarTask:
          $ref: '#/components/schemas/SidecarTask'
      type: object
    ConsulExposeConfig:
      properties:
        Path:
          items:
            $ref: '#/components/schemas/ConsulExposePath'
          type: array
      type: object
    ConsulExposePath:
      $ref: '#/components/schemas/ConsulExposePath'
    ConsulGateway:
      properties:
        Ingress:
          $ref: '#/components/schemas/ConsulIngressConfigEntry'
        Mesh:
          $ref: '#/components/schemas/ConsulMeshConfigEntry'
        Proxy:
          $ref: '#/components/schemas/ConsulGatewayProxy'
        Terminating:
          $ref: '#/components/schemas/ConsulTerminatingConfigEntry'
      type: object
    ConsulGatewayBindAddress:
      properties:
        Address:
          type: string
        Name:
          type: string
        Port:
          type: integer
      type: object
    ConsulGatewayProxy:
      properties:
        Config:
          $ref: '#/components/schemas/object'
        EnvoyDNSDiscoveryType:
          type: string
        EnvoyGatewayBindAddresses:
          $ref: '#/components/schemas/ConsulGatewayBindAddress'
        EnvoyGatewayBindTaggedAddresses:
          type: boolean
        EnvoyGatewayNoDefaultBind:
          type: boolean
      type: object
    ConsulGatewayTLSConfig:
      properties:
        Enabled:
          type: boolean
      type: object
    ConsulIngressConfigEntry:
      properties:
        Listeners:
          items:
            $ref: '#/components/schemas/ConsulIngressListener'
          type: array
        TLS:
          $ref: '#/components/schemas/ConsulGatewayTLSConfig'
      type: object
    ConsulIngressListener:
      $ref: '#/components/schemas/ConsulIngressListener'
    ConsulIngressService:
      $ref: '#/components/schemas/ConsulIngressService'
    ConsulLinkedService:
      $ref: '#/components/schemas/ConsulLinkedService'
    ConsulMeshConfigEntry: {}
    ConsulMeshGateway:
      properties:
        Mode:
          type: string
      type: object
    ConsulProxy:
      properties:
        Config:
          $ref: '#/components/schemas/object'
        ExposeConfig:
          $ref: '#/components/schemas/ConsulExposeConfig'
        LocalServiceAddress:
          type: string
        LocalServicePort:
          type: integer
        Upstreams:
          items:
            $ref: '#/components/schemas/ConsulUpstream'
          type: array
      type: object
    ConsulSidecarService:
      properties:
        DisableDefaultTCPCheck:
          type: boolean
        Port:
          type: string
        Proxy:
          $ref: '#/components/schemas/ConsulProxy'
        Tags:
          items:
            type: string
          type: array
      type: object
    ConsulTerminatingConfigEntry:
      properties:
        Services:
          items:
            $ref: '#/components/schemas/ConsulLinkedService'
          type: array
      type: object
    ConsulUpstream:
      $ref: '#/components/schemas/ConsulUpstream'
    DNSConfig:
      properties:
        Options:
          items:
            type: string
          type: array
        Searches:
          items:
            type: string
          type: array
        Servers:
          items:
            type: string
          type: array
      type: object
    DispatchPayloadConfig:
      properties:
        File:
          type: string
      type: object
    EphemeralDisk:
      properties:
        Migrate:
          type: boolean
        SizeMB:
          type: integer
        Sticky:
          type: boolean
      type: object
    Job:
      properties:
        Affinities:
          items:
            $ref: '#/components/schemas/Affinity'
          type: array
        AllAtOnce:
          type: boolean
        Constraints:
          items:
            $ref: '#/components/schemas/Constraint'
          type: array
        ConsulNamespace:
          type: string
        ConsulToken:
          type: string
        CreateIndex:
          maximum: 1.8446744073709552e+19
          minimum: 0
          type: integer
        Datacenters:
          items:
            type: string
          type: array
        Dispatched:
          type: boolean
        ID:
          type: string
        JobModifyIndex:
          maximum: 1.8446744073709552e+19
          minimum: 0
          type: integer
        Meta:
          additionalProperties:
            type: string
          type: object
        Migrate:
          $ref: '#/components/schemas/MigrateStrategy'
        ModifyIndex:
          maximum: 1.8446744073709552e+19
          minimum: 0
          type: integer
        Multiregion:
          $ref: '#/components/schemas/Multiregion'
        Name:
          type: string
        Namespace:
          type: string
        NomadTokenID:
          type: string
        ParameterizedJob:
          $ref: '#/components/schemas/ParameterizedJobConfig'
        ParentID:
          type: string
        Payload:
          items:
            format: byte
            type: string
          type: array
        Periodic:
          $ref: '#/components/schemas/PeriodicConfig'
        Priority:
          type: integer
        Region:
          type: string
        Reschedule:
          $ref: '#/components/schemas/ReschedulePolicy'
        Spreads:
          items:
            $ref: '#/components/schemas/Spread'
          type: array
        Stable:
          type: boolean
        Status:
          type: string
        StatusDescription:
          type: string
        Stop:
          type: boolean
        SubmitTime:
          format: int64
          type: integer
        TaskGroups:
          items:
            $ref: '#/components/schemas/TaskGroup'
          type: array
        Type:
          type: string
        Update:
          $ref: '#/components/schemas/UpdateStrategy'
        VaultNamespace:
          type: string
        VaultToken:
          type: string
        Version:
          maximum: 1.8446744073709552e+19
          minimum: 0
          type: integer
      type: object
    JobRegisterRequest:
      properties:
        EnforceIndex:
          type: boolean
        Job:
          $ref: '#/components/schemas/Job'
        JobModifyIndex:
          maximum: 1.8446744073709552e+19
          minimum: 0
          type: integer
        PolicyOverride:
          type: boolean
        PreserveCounts:
          type: boolean
        WriteRequest:
          $ref: '#/components/schemas/WriteRequest'
      type: object
    JobRegisterResponse:
      properties:
        EvalCreateIndex:
          maximum: 1.8446744073709552e+19
          minimum: 0
          type: integer
        EvalID:
          type: string
        JobModifyIndex:
          maximum: 1.8446744073709552e+19
          minimum: 0
          type: integer
        QueryMeta:
          $ref: '#/components/schemas/QueryMeta'
        Warnings:
          type: string
      type: object
    LogConfig:
      properties:
        MaxFileSizeMB:
          type: integer
        MaxFiles:
          type: integer
      type: object
    MigrateStrategy:
      properties:
        HealthCheck:
          type: string
        MaxParallel:
          type: integer
      type: object
    Multiregion:
      properties:
        Regions:
          items:
            $ref: '#/components/schemas/MultiregionRegion'
          type: array
        Strategy:
          $ref: '#/components/schemas/MultiregionStrategy'
      type: object
    MultiregionRegion:
      $ref: '#/components/schemas/MultiregionRegion'
    MultiregionStrategy:
      properties:
        MaxParallel:
          type: integer
        OnFailure:
          type: string
      type: object
    NetworkResource:
      $ref: '#/components/schemas/NetworkResource'
    ParameterizedJobConfig:
      properties:
        MetaOptional:
          items:
            type: string
          type: array
        MetaRequired:
          items:
            type: string
          type: array
        Payload:
          type: string
      type: object
    PeriodicConfig:
      properties:
        Enabled:
          type: boolean
        ProhibitOverlap:
          type: boolean
        Spec:
          type: string
        SpecType:
          type: string
        TimeZone:
          type: string
      type: object
    Port:
      $ref: '#/components/schemas/Port'
    QueryMeta:
      properties:
        Index:
          maximum: 1.8446744073709552e+19
          minimum: 0
          type: integer
        KnownLeader:
          type: boolean
      type: object
    RequestedDevice:
      $ref: '#/components/schemas/RequestedDevice'
    ReschedulePolicy:
      properties:
        Attempts:
          type: integer
        DelayFunction:
          type: string
        Unlimited:
          type: boolean
      type: object
    Resources:
      properties:
        CPU:
          type: integer
        Cores:
          type: integer
        Devices:
          items:
            $ref: '#/components/schemas/RequestedDevice'
          type: array
        DiskMB:
          type: integer
        IOPS:
          type: integer
        MemoryMB:
          type: integer
        MemoryMaxMB:
          type: integer
        Networks:
          items:
            $ref: '#/components/schemas/NetworkResource'
          type: array
      type: object
    RestartPolicy:
      properties:
        Attempts:
          type: integer
        Mode:
          type: string
      type: object
    ScalingPolicy:
      $ref: '#/components/schemas/ScalingPolicy'
    Service:
      $ref: '#/components/schemas/Service'
    ServiceCheck:
      $ref: '#/components/schemas/ServiceCheck'
    SidecarTask:
      properties:
        Config:
          $ref: '#/components/schemas/object'
        Driver:
          type: string
        Env:
          additionalProperties:
            type: string
          type: object
        KillSignal:
          type: string
        LogConfig:
          $ref: '#/components/schemas/LogConfig'
        Meta:
          additionalProperties:
            type: string
          type: object
        Name:
          type: string
        Resources:
          $ref: '#/components/schemas/Resources'
        User:
          type: string
      type: object
    Spread:
      $ref: '#/components/schemas/Spread'
    SpreadTarget:
      $ref: '#/components/schemas/SpreadTarget'
    Task:
      $ref: '#/components/schemas/Task'
    TaskArtifact:
      $ref: '#/components/schemas/TaskArtifact'
    TaskCSIPluginConfig:
      properties:
        ID:
          type: string
        MountDir:
          type: string
        Type:
          type: string
      type: object
    TaskGroup:
      $ref: '#/components/schemas/TaskGroup'
    TaskLifecycle:
      properties:
        Hook:
          type: string
        Sidecar:
          type: boolean
      type: object
    Template:
      $ref: '#/components/schemas/Template'
    UpdateStrategy:
      properties:
        AutoPromote:
          type: boolean
        AutoRevert:
          type: boolean
        Canary:
          type: integer
        HealthCheck:
          type: string
        MaxParallel:
          type: integer
      type: object
    Vault:
      properties:
        ChangeMode:
          type: string
        ChangeSignal:
          type: string
        Env:
          type: boolean
        Namespace:
          type: string
        Policies:
          items:
            type: string
          type: array
      type: object
    VolumeMount:
      $ref: '#/components/schemas/VolumeMount'
    VolumeRequest:
      properties:
        AccessMode:
          type: string
        AttachmentMode:
          type: string
        ExtraKeysHCL:
          items:
            type: string
          type: array
        MountOptions:
          $ref: '#/components/schemas/CSIMountOptions'
        Name:
          type: string
        PerAlloc:
          type: boolean
        ReadOnly:
          type: boolean
        Source:
          type: string
        Type:
          type: string
      type: object
    WriteRequest:
      properties:
        Namespace:
          type: string
        Region:
          type: string
        SecretID:
          type: string
      type: object
info:
  description: >-
    <h1 id="http-api">HTTP API</h1>

    <p>The main interface to Nomad is a RESTful HTTP API. The API can query the
    current
        state of the system as well as modify the state of the system. The Nomad CLI
        actually invokes Nomad&#39;s HTTP for many commands.</p>
    <h2 id="version-prefix">Version Prefix</h2>

    <p>All API routes are prefixed with <code>/v1/</code>.</p>

    <h2 id="addressing-and-ports">Addressing and Ports</h2>

    <p>Nomad binds to a specific set of addresses and ports. The HTTP API is
    served via
        the <code>http</code> address and port. This <code>address:port</code> must be accessible locally. If
        you bind to <code>127.0.0.1:4646</code>, the API is only available <em>from that host</em>. If you
        bind to a private internal IP, the API will be available from within that
        network. If you bind to a public IP, the API will be available from the public
        Internet (not recommended).</p>
    <p>The default port for the Nomad HTTP API is <code>4646</code>. This can be
    overridden via
        the Nomad configuration block. Here is an example curl request to query a Nomad
        server with the default configuration:</p>
    <pre><code class="language-shell-session">$ curl
    http://127.0.0.1:4646/v1/agent/members

    </code></pre>

    <p>The conventions used in the API documentation do not list a port and use
    the
        standard URL <code>localhost:4646</code>. Be sure to replace this with your Nomad agent URL
        when using the examples.</p>
    <h2 id="data-model-and-layout">Data Model and Layout</h2>

    <p>There are five primary nouns in Nomad:</p>

    <ul>
        <li>jobs</li>
        <li>nodes</li>
        <li>allocations</li>
        <li>deployments</li>
        <li>evaluations</li>
    </ul>

    <p><a href="/img/nomad-data-model.png"><img src="/img/nomad-data-model.png"
    alt="Nomad Data Model"></a></p>

    <p>Jobs are submitted by users and represent a <em>desired state</em>. A job
    is a
        declarative description of tasks to run which are bounded by constraints and
        require resources. Jobs can also have affinities which are used to express placement
        preferences. Nodes are the servers in the clusters that tasks can be
        scheduled on. The mapping of tasks in a job to nodes is done using allocations.
        An allocation is used to declare that a set of tasks in a job should be run on a
        particular node. Scheduling is the process of determining the appropriate
        allocations and is done as part of an evaluation. Deployments are objects to
        track a rolling update of allocations between two versions of a job.</p>
    <p>The API is modeled closely on the underlying data model. Use the links to
    the
        left for documentation about specific endpoints. There are also &quot;Agent&quot; APIs
        which interact with a specific agent and not the broader cluster used for
        administration.</p>
    <h2 id="acls">ACLs</h2>

    <p>Several endpoints in Nomad use or require ACL tokens to operate. The
    token are used to authenticate the request and determine if the request is
    allowed based on the associated authorizations. Tokens are specified
    per-request by using the <code>X-Nomad-Token</code> request header set to
    the <code>SecretID</code> of an ACL Token.</p>

    <p>For more details about ACLs, please see the <a
    href="https://learn.hashicorp.com/collections/nomad/access-control">ACL
    Guide</a>.</p>

    <h2 id="authentication">Authentication</h2>

    <p>When ACLs are enabled, a Nomad token should be provided to API requests
    using the <code>X-Nomad-Token</code> header. When using authentication,
    clients should communicate via TLS.</p>

    <p>Here is an example using curl:</p>

    <pre><code class="language-shell-session">$ curl \
        --header &quot;X-Nomad-Token: aa534e09-6a07-0a45-2295-a7f77063d429&quot; \
        https://localhost:4646/v1/jobs
    </code></pre>

    <h2 id="namespaces">Namespaces</h2>

    <p>Nomad has support for namespaces, which allow jobs and their associated
    objects
        to be segmented from each other and other users of the cluster. When using
        non-default namespace, the API request must pass the target namespace as an API
        query parameter. Prior to Nomad 1.0 namespaces were Enterprise-only.</p>
    <p>Here is an example using curl:</p>

    <pre><code class="language-shell-session">$ curl \
        https://localhost:4646/v1/jobs?namespace=qa
    </code></pre>

    <h2 id="blocking-queries">Blocking Queries</h2>

    <p>Many endpoints in Nomad support a feature known as &quot;blocking
    queries&quot;. A
        blocking query is used to wait for a potential change using long polling. Not
        all endpoints support blocking, but each endpoint uniquely documents its support
        for blocking queries in the documentation.</p>
    <p>Endpoints that support blocking queries return an HTTP header named
        <code>X-Nomad-Index</code>. This is a unique identifier representing the current state of
        the requested resource. On a new Nomad cluster the value of this index starts at 1.
    </p>

    <p>On subsequent requests for this resource, the client can set the
    <code>index</code> query
        string parameter to the value of <code>X-Nomad-Index</code>, indicating that the client
        wishes to wait for any changes subsequent to that index.</p>
    <p>When this is provided, the HTTP request will &quot;hang&quot; until a
    change in the system
        occurs, or the maximum timeout is reached. A critical note is that the return of
        a blocking request is <strong>no guarantee</strong> of a change. It is possible that the
        timeout was reached or that there was an idempotent write that does not affect
        the result of the query.</p>
    <p>In addition to <code>index</code>, endpoints that support blocking will
    also honor a <code>wait</code>
        parameter specifying a maximum duration for the blocking request. This is
        limited to 10 minutes. If not set, the wait time defaults to 5 minutes. This
        value can be specified in the form of &quot;10s&quot; or &quot;5m&quot; (i.e., 10 seconds or 5
        minutes, respectively). A small random amount of additional wait time is added
        to the supplied maximum <code>wait</code> time to spread out the wake up time of any
        concurrent requests. This adds up to <code>wait / 16</code> additional time to the maximum
        duration.</p>
    <h2 id="consistency-modes">Consistency Modes</h2>

    <p>Most of the read query endpoints support multiple levels of consistency.
    Since
        no policy will suit all clients&#39; needs, these consistency modes allow the user
        to have the ultimate say in how to balance the trade-offs inherent in a
        distributed system.</p>
    <p>The two read modes are:</p>

    <ul>
        <li>
            <p><code>default</code> - If not specified, the default is strongly consistent in almost all
                cases. However, there is a small window in which a new leader may be elected
                during which the old leader may service stale values. The trade-off is fast
                reads but potentially stale values. The condition resulting in stale reads is
                hard to trigger, and most clients should not need to worry about this case.
                Also, note that this race condition only applies to reads, not writes.</p>
        </li>
        <li>
            <p><code>stale</code> - This mode allows any server to service the read regardless of
                whether it is the leader. This means reads can be arbitrarily stale; however,
                results are generally consistent to within 50 milliseconds of the leader. The
                trade-off is very fast and scalable reads with a higher likelihood of stale
                values. Since this mode allows reads without a leader, a cluster that is
                unavailable will still be able to respond to queries.</p>
        </li>
    </ul>

    <p>To switch these modes, use the <code>stale</code> query parameter on
    requests.</p>

    <p>To support bounding the acceptable staleness of data, responses provide
    the
        <code>X-Nomad-LastContact</code> header containing the time in milliseconds that a server
        was last contacted by the leader node. The <code>X-Nomad-KnownLeader</code> header also
        indicates if there is a known leader. These can be used by clients to gauge the
        staleness of a result and take appropriate action.
    </p>

    <h2 id="cross-region-requests">Cross-Region Requests</h2>

    <p>By default, any request to the HTTP API will default to the region on
    which the
        machine is servicing the request. If the agent runs in &quot;region1&quot;, the request
        will query the region &quot;region1&quot;. A target region can be explicitly request using
        the <code>?region</code> query parameter. The request will be transparently forwarded and
        serviced by a server in the requested region.</p>
    <h2 id="compressed-responses">Compressed Responses</h2>

    <p>The HTTP API will gzip the response if the HTTP request denotes that the
    client
        accepts gzip compression. This is achieved by passing the accept encoding:</p>
    <pre><code class="language-shell-session">$ curl \
        --header &quot;Accept-Encoding: gzip&quot; \
        https://localhost:4646/v1/...
    </code></pre>

    <h2 id="formatted-json-output">Formatted JSON Output</h2>

    <p>By default, the output of all HTTP API requests is minimized JSON. If the
    client
        passes <code>pretty</code> on the query string, formatted JSON will be returned.</p>
    <p>In general, clients should prefer a client-side parser like
    <code>jq</code> instead of
        server-formatted data. Asking the server to format the data takes away
        processing cycles from more important tasks.</p>
    <pre><code class="language-shell-session">$ curl
    https://localhost:4646/v1/page?pretty

    </code></pre>

    <h2 id="http-methods">HTTP Methods</h2>

    <p>Nomad&#39;s API aims to be RESTful, although there are some exceptions.
    The API
        responds to the standard HTTP verbs GET, PUT, and DELETE. Each API method will
        clearly document the verb(s) it responds to and the generated response. The same
        path with different verbs may trigger different behavior. For example:</p>
    <pre><code class="language-text">PUT /v1/jobs

    GET /v1/jobs

    </code></pre>

    <p>Even though these share a path, the <code>PUT</code> operation creates a
    new job whereas
        the <code>GET</code> operation reads all jobs.</p>
    <h2 id="http-response-codes">HTTP Response Codes</h2>

    <p>Individual API&#39;s will contain further documentation in the case that
    more
        specific response codes are returned but all clients should handle the following:</p>
    <ul>
        <li>200 and 204 as success codes.</li>
        <li>400 indicates a validation failure and if a parameter is modified in the
            request, it could potentially succeed.</li>
        <li>403 marks that the client isn&#39;t authenticated for the request.</li>
        <li>404 indicates an unknown resource.</li>
        <li>5xx means that the client should not expect the request to succeed if retried.</li>
    </ul>
  title: nomad
  contact:
    email: support@hashicorp.com
  license:
    name: MPL 2
    url: https://github.com/hashicorp/nomad/blob/main/LICENSE
  version: 1.1.0
servers:
  - url: '{protocol}://127.0.0.1:{port}/v1'
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      port:
        default: '4646'
openapi: 3.0.3
paths:
  /v1/jobs:
    get:
      tags:
        - Jobs
      summary: List all known jobs registered with Nomad.
      operationId: getJobs
      parameters:
        - $ref: '#/components/parameters/RegionParam'
        - $ref: '#/components/parameters/StaleParam'
        - $ref: '#/components/parameters/PrefixParam'
        - $ref: '#/components/parameters/NamespaceParam'
        - $ref: '#/components/parameters/PerPageParam'
        - $ref: '#/components/parameters/NextTokenParam'
        - $ref: '#/components/parameters/IndexParam'
        - $ref: '#/components/parameters/WaitParam'
        - $ref: '#/components/parameters/NomadTokenHeader'
      description: >-
        <p>This endpoint lists all known jobs in the system registered with
        Nomad.</p>

        <table>
            <thead>
                <tr>
                    <th>Method</th>
                    <th>Path</th>
                    <th>Produces</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><code>GET</code></td>
                    <td><code>/v1/jobs</code></td>
                    <td><code>application/json</code></td>
                </tr>
            </tbody>
        </table>

        <p>The table below shows this endpoint&#39;s support for
            <a href="/api-docs#blocking-queries">blocking queries</a> and
            <a href="/api-docs#acls">required ACLs</a>.
        </p>

        <table>
            <thead>
                <tr>
                    <th>Blocking Queries</th>
                    <th>ACL Required</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><code>YES</code></td>
                    <td><code>namespace:list-jobs</code></td>
                </tr>
            </tbody>
        </table>

        <h3 id="parameters">Parameters</h3>

        <ul>
            <li>
                <p><code>prefix</code> <code>(string: &quot;&quot;)</code> - Specifies a string to filter jobs on based on
                    an index prefix. This is specified as a query string parameter.</p>
            </li>
            <li>
                <p><code>namespace</code> <code>(string: &quot;default&quot;)</code> - Specifies the target namespace. Specifying
                    <code>*</code> would return all jobs across all the authorized namespaces.
                </p>
            </li>
        </ul>

        <h3 id="sample-request">Sample Request</h3>

        <pre><code class="language-shell-session">$ curl
        https://localhost:4646/v1/jobs

        </code></pre>

        <pre><code class="language-shell-session">$ curl
        https://localhost:4646/v1/jobs?prefix=team

        </code></pre>

        <pre><code class="language-shell-session">$ curl
        https://localhost:4646/v1/jobs?namespace=*&amp;prefix=team

        </code></pre>

        <h3 id="sample-response">Sample Response</h3>

        <pre><code class="language-json">[
          {
            &quot;ID&quot;: &quot;example&quot;,
            &quot;ParentID&quot;: &quot;&quot;,
            &quot;Name&quot;: &quot;example&quot;,
            &quot;Type&quot;: &quot;service&quot;,
            &quot;Priority&quot;: 50,
            &quot;Status&quot;: &quot;pending&quot;,
            &quot;StatusDescription&quot;: &quot;&quot;,
            &quot;JobSummary&quot;: {
              &quot;JobID&quot;: &quot;example&quot;,
              &quot;Namespace&quot;: &quot;default&quot;,
              &quot;Summary&quot;: {
                &quot;cache&quot;: {
                  &quot;Queued&quot;: 1,
                  &quot;Complete&quot;: 1,
                  &quot;Failed&quot;: 0,
                  &quot;Running&quot;: 0,
                  &quot;Starting&quot;: 0,
                  &quot;Lost&quot;: 0
                }
              },
              &quot;Children&quot;: {
                &quot;Pending&quot;: 0,
                &quot;Running&quot;: 0,
                &quot;Dead&quot;: 0
              },
              &quot;CreateIndex&quot;: 52,
              &quot;ModifyIndex&quot;: 96
            },
            &quot;CreateIndex&quot;: 52,
            &quot;ModifyIndex&quot;: 93,
            &quot;JobModifyIndex&quot;: 52
          }
        ]

        </code></pre>
      responses:
        '200':
          description: List of jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobListStub'
          headers:
            X-Nomad-Index:
              $ref: '#/components/headers/X-Nomad-Index'
            X-Nomad-Known-Leader:
              $ref: '#/components/headers/X-Nomad-Known-Leader'
            X-Nomad-Last-Contact:
              $ref: '#/components/headers/X-Nomad-Last-Contact'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Jobs
      summary: This endpoint creates (aka "registers") a new job in the system.
      operationId: postJob
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobRegisterRequest'
      parameters:
        - $ref: '#/components/parameters/RegionParam'
        - $ref: '#/components/parameters/NamespaceParam'
        - $ref: '#/components/parameters/NomadTokenHeader'
      responses:
        '200':
          description: TODO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobRegisterResponse'
          headers:
            X-Nomad-Index:
              $ref: '#/components/headers/X-Nomad-Index'
            X-Nomad-Known-Leader:
              $ref: '#/components/headers/X-Nomad-Known-Leader'
            X-Nomad-Last-Contact:
              $ref: '#/components/headers/X-Nomad-Last-Contact'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'

