name: build

on:
  push:
    branches:
      - main
      - release/**
      - releng-329
  workflow_dispatch:
    inputs:
      build-ref:
        description: 'The git ref to build from'
        type: string
        default: ''
        required: false
      make-prerelease:
        description: "Run prerelease to generate files"
        type: "boolean"
        required: false
        default: true

env:
  PKG_NAME: "nomad"
  GO_TAGS: "release"

jobs:
  get-go-version:
    runs-on: ubuntu-20.04
    outputs:
      go-version: ${{ steps.get-go-version.outputs.go-version }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.build-ref }}
      - name: Determine Go version
        id: get-go-version
        # We use .go-version as our source of truth for current Go
        # version, because "goenv" can react to it automatically.
        run: |
          echo "Building with Go $(cat .go-version)"
          echo "go-version=$(cat .go-version)" >> $GITHUB_OUTPUT
  get-product-version:
    runs-on: ubuntu-20.04
    outputs:
      product-version: ${{ steps.get-product-version.outputs.product-version }}
      package-name: ${{ env.PKG_NAME }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.build-ref }}
      - name: get product version
        id: get-product-version
        run: |
          make version
          echo "product-version=$(make version)" >> $GITHUB_OUTPUT
  generate-metadata-file:
    needs: get-product-version
    runs-on: ubuntu-20.04
    outputs:
      filepath: ${{ steps.generate-metadata-file.outputs.filepath }}
    steps:
      - name: "Checkout directory"
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.build-ref }}
      - name: Generate metadata file
        id: generate-metadata-file
        uses: hashicorp/actions-generate-metadata@v1.0.1
        with:
          version: ${{ needs.get-product-version.outputs.product-version }}
          product: ${{ env.PKG_NAME }}
          repositoryOwner: "hashicorp"
          sha: ${{ github.event.inputs.build-ref }}
      - uses: actions/upload-artifact@v2
        with:
          name: metadata.json
          path: ${{ steps.generate-metadata-file.outputs.filepath }}
  build-other:
    needs: [get-go-version, get-product-version]
    strategy:
      matrix:
        goos: [windows]
        goarch: ["386", "amd64"]
      fail-fast: true
    uses: ./.github/workflows/build-nomad-oss.yml
    name: Go ${{ needs.get-go-version.outputs.go-version }} ${{ matrix.goos }} ${{ matrix.goarch }} build
    with:
      create-packages: false
      goarch: ${{ matrix.goarch }}
      goos: ${{ matrix.goos }}
      cgo-enabled: 1
      go-tags: release
      go-version: ${{ needs.get-go-version.outputs.go-version }}
      package-name: ${{ needs.get-product-version.outputs.package-name }}
      nomad-version: ${{ needs.get-product-version.outputs.product-version }}
    secrets: inherit
  build-linux:
    needs: [get-go-version, get-product-version]
    strategy:
      matrix:
        goos: [linux]
        goarch: ["arm", "arm64", "386", "amd64"]
      fail-fast: true
    uses: ./.github/workflows/build-nomad-oss.yml
    with:
      goarch: ${{ matrix.goarch }}
      goos: ${{ matrix.goos }}
      cgo-enabled: 1
      go-tags: release
      go-version: ${{ needs.get-go-version.outputs.go-version }}
      package-name: ${{ needs.get-product-version.outputs.package-name }}
      nomad-version: ${{ needs.get-product-version.outputs.product-version }}
    secrets: inherit
  build-darwin:
    needs: [get-go-version, get-product-version]
    strategy:
      matrix:
        goos: [darwin]
        goarch: ["arm64", "amd64"]
      fail-fast: true
    name: Go ${{ needs.get-go-version.outputs.go-version }} ${{ matrix.goos }} ${{ matrix.goarch }} build
    uses: ./.github/workflows/build-nomad-oss.yml
    with:
      create-packages: false
      goarch: ${{ matrix.goarch }}
      goos: ${{ matrix.goos }}
      cgo-enabled: 1
      go-tags: release netcgo
      go-version: ${{ needs.get-go-version.outputs.go-version }}
      package-name: ${{ needs.get-product-version.outputs.package-name }}
      nomad-version: ${{ needs.get-product-version.outputs.product-version }}
    secrets: inherit

  # This placed here for when the Nomad team is ready to build docker images.
  # Please reach out the RDX team for assistance or refer to the CRT Self-Serve Onboarding doc
  # [template is housed in github.com/hashicorp/crt-core-helloworld-enterprise].

  # build-docker:
  #   name: Docker ${{ matrix.arch }} build
  #   needs:
  #     - get-product-version
  #     - build
  #   runs-on: [ custom, linux, xxl, 20.04 ]
  #   strategy:
  #     matrix:
  #       arch: ["arm", "arm64", "386", "amd64"]
  #   env:
  #     repo: ${{github.event.repository.name}}
  #     version: ${{needs.get-product-version.outputs.product-version}}

  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Docker Build (Action)
  #       uses: hashicorp/actions-docker-build@v1
  #       with:
  #         # Add smoke test here. Below is a sample smoke test that runs the built image
  #         # and validates the version.
  #         smoke_test: |
  #           TEST_VERSION="$(docker run "${IMAGE_NAME}" | awk '/CLI version/{print $3}')"
  #           if [ "${TEST_VERSION}" != "${version}" ]; then
  #             echo "Test FAILED"
  #             exit 1
  #           fi
  #           echo "Test PASSED"
  #         version: ${{env.version}}
  #         target: release-default
  #         arch: ${{matrix.arch}}
  #         tags: |
  #           docker.io/hashicorp/${{env.repo}}:${{env.version}}
  #           986891699432.dkr.ecr.us-east-1.amazonaws.com/hashicorp/${{env.repo}}:${{env.version}}

