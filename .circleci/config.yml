### ***
### WARNING: DO NOT manually EDIT or MERGE this file, it is generated by 'make ci-config'.
### INSTEAD: Edit or merge the source in config/ then run 'make ci-config'.
### ***
version: 2
jobs:
  build-binaries:
    docker:
    - image: golang:1.14.1
    working_directory: /go/src/github.com/hashicorp/nomad
    environment:
    - GIT_PAGER: cat
    - GOMAXPROCS: 1
    - GOPATH: /go
    - GOTESTSUM_JSONFILE: /tmp/test-reports/testjsonfile.json
    - GOTESTSUM_JUNITFILE: /tmp/test-reports/results.xml
    - NOMAD_SLOW_TEST: 1
    - PAGER: cat
    - GO_TAGS: ui codegen_generated
    steps:
    - checkout
    - run:
        command: apt-get update; apt-get install -y sudo unzip zip
    - run:
        command: make deps
    - run:
        command: |
          sudo rm -rf /usr/bin/protoc
          sudo ./scripts/vagrant-linux-priv-protoc.sh
        name: install protoc
    - run:
        command: ./scripts/vagrant-linux-unpriv-ui.sh
    - run:
        command: sudo -E PATH="$GOPATH/bin:/usr/local/go/bin:$PATH" make prerelease
    - run:
        command: make pkg/windows_amd64.zip pkg/linux_amd64.zip
    - store_artifacts:
        destination: /builds/nomad_windows_amd64.zip
        path: pkg/windows_amd64.zip
    - store_artifacts:
        destination: /builds/nomad_linux_amd64.zip
        path: pkg/linux_amd64.zip
  website-docker-image:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    steps:
    - checkout
    - setup_remote_docker
    - run:
        command: |
          # There is an edge case that would cause an issue here - if dependencies are updated to an exact copy
          # of a previous version, for example if packge-lock.json is reverted, we need to manually push the new
          # image to the "latest" tag
          # Ignore job if running an enterprise build
          IMAGE_TAG=$(cat website/Dockerfile website/package-lock.json | sha256sum | awk '{print $1;}')
          echo "Using $IMAGE_TAG"
          if  [ "$CIRCLE_REPOSITORY_URL" != "git@github.com:hashicorp/nomad.git" ]; then
            echo "Not Nomad OSS Repo, not building website docker image"
          elif curl https://hub.docker.com/v2/repositories/hashicorp/nomad-website/tags/$IMAGE_TAG -fsL > /dev/null; then
              echo "Dependencies have not changed, not building a new website docker image."
          else
              cd website/
              docker build -t hashicorp/nomad-website:$IMAGE_TAG .
              docker tag hashicorp/nomad-website:$IMAGE_TAG hashicorp/nomad-website:latest
              docker login -u $WEBSITE_DOCKER_USER -p $WEBSITE_DOCKER_PASS
              docker push hashicorp/nomad-website
          fi
        name: Build Docker Image if Necessary
workflows:
  build-test:
    jobs:
    - build-binaries:
        filters:
          branches:
            ignore:
            - stable-website
            - /^.-ui\b.*/
  website:
    jobs:
    - website-docker-image:
        filters:
          branches:
            only:
            - master
        context: static-sites
  version: 2

# Original config.yml file:
# commands:
#   install-circleci-local-cli:
#     parameters:
#       sha256:
#         default: f178ea62c781aec06267017404f87983c87f171fd0e66ef3737916246ae66dd6
#         type: string
#       version:
#         default: 0.1.5879
#         type: string
#     steps:
#     - run:
#         command: \"CCI_VERSION=\\\"<< parameters.version >>\\\"\\nCCI_SHA256=\\\"<< parameters.sha256
#           >>\\\"\\n\\nURL=\\\"https://github.com/CircleCI-Public/circleci-cli/releases/download/v${CCI_VERSION}/circleci-cli_${CCI_VERSION}_linux_amd64.tar.gz\\\"\\n\\nmkdir
#           -p /tmp/circleci-cli/\\ncurl --fail --show-error --location \\\\\\n  -o /tmp/circleci-cli/cli.tar.gz
#           \\\"${URL}\\\"\\n\\necho \\\"$CCI_SHA256 /tmp/circleci-cli/cli.tar.gz\\\" | sha256sum
#           -c\\n\\ntar -xz --strip-components=1 \\\\\\n  -C /tmp/circleci-cli \\\\\\n  -f /tmp/circleci-cli/cli.tar.gz
#           \\\\\\n  \\\"circleci-cli_${CCI_VERSION}_linux_amd64/circleci\\\" \\n\\nsudo cp /tmp/circleci-cli/circleci
#           /usr/bin/circleci-local-cli\\n\\ncircleci-local-cli version\\n\"
#         name: Install CircleCI CLI << parameters.version >>
#   install-consul:
#     parameters:
#       version:
#         default: 1.6.4
#         type: string
#     steps:
#     - run:
#         command: |
#           curl -SL --fail -o /tmp/consul.zip https://releases.hashicorp.com/consul/<< parameters.version >>/consul_<< parameters.version >>_linux_amd64.zip
#           sudo unzip -d /usr/local/bin /tmp/consul.zip
#           rm -rf /tmp/consul*
#         name: Install Consul << parameters.version >>
#   install-golang:
#     parameters:
#       target_directory:
#         default: /usr/local
#         type: string
#     steps:
#     - run:
#         command: |
#           set -x
# 
#           os=\"linux\"
#           if [[ \"$OSTYPE\" == \"darwin\"* ]]
#           then
#             os=\"darwin\"
#           fi
# 
#           echo installing golang ${GOLANG_VERSION}
#           sudo rm -rf << parameters.target_directory >>/go
#           sudo mkdir -p << parameters.target_directory >>
#           curl -SL --fail -o /tmp/golang.tar.gz https://dl.google.com/go/go${GOLANG_VERSION}.${os}-amd64.tar.gz
#           sudo tar -C << parameters.target_directory >> -xzf /tmp/golang.tar.gz
#           rm -rf /tmp/golang.tar.gz
#         name: install golang
#   install-protoc:
#     steps:
#     - run:
#         command: |
#           sudo rm -rf /usr/bin/protoc
#           sudo ./scripts/vagrant-linux-priv-protoc.sh
#         name: install protoc
#   install-vault:
#     parameters:
#       version:
#         default: 1.2.4
#         type: string
#     steps:
#     - run:
#         command: |
#           curl -SL --fail -o /tmp/vault.zip https://releases.hashicorp.com/vault/<< parameters.version >>/vault_<< parameters.version>>_linux_amd64.zip
#           sudo unzip -d /usr/local/bin /tmp/vault.zip
#           rm -rf /tmp/vault*
#         name: Install Vault << parameters.version >>
#   run-tests:
#     steps:
#     - run:
#         command: |
#           if [ -z $GOTEST_PKGS_EXCLUDE ];
#           then
#             unset GOTEST_PKGS_EXCLUDE
#           else
#             unset GOTEST_PKGS
#           fi
# 
#           if [ ! -z $GOTESTARCH ]; then
#             export GOARCH=\"$GOTESTARCH\";
#           fi
# 
#           mkdir -p /tmp/test-reports
#           sudo -E PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\" make generate-structs
#           sudo -E PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\" make test-nomad
#         name: Running Nomad Tests
#         no_output_timeout: 20m
# executors:
#   go:
#     docker:
#     - image: golang:1.14.1
#     environment:
#       GIT_PAGER: cat
#       GOMAXPROCS: 1
#       GOPATH: /go
#       GOTESTSUM_JSONFILE: /tmp/test-reports/testjsonfile.json
#       GOTESTSUM_JUNITFILE: /tmp/test-reports/results.xml
#       NOMAD_SLOW_TEST: 1
#       PAGER: cat
#     working_directory: /go/src/github.com/hashicorp/nomad
#   go-machine:
#     environment:
#       GIT_PAGER: cat
#       GOLANG_VERSION: 1.14.1
#       GOMAXPROCS: 1
#       GOPATH: /home/circleci/go
#       GOTESTSUM_JSONFILE: /tmp/test-reports/testjsonfile.json
#       GOTESTSUM_JUNITFILE: /tmp/test-reports/results.xml
#       NOMAD_SLOW_TEST: 1
#       PAGER: cat
#     machine:
#       image: circleci/classic:201808-01
#     working_directory: ~/go/src/github.com/hashicorp/nomad
#   go-machine-recent:
#     environment:
#       GIT_PAGER: cat
#       GOLANG_VERSION: 1.14.1
#       GOMAXPROCS: 1
#       GOPATH: /home/circleci/go
#       GOTESTSUM_JSONFILE: /tmp/test-reports/testjsonfile.json
#       GOTESTSUM_JUNITFILE: /tmp/test-reports/results.xml
#       NOMAD_SLOW_TEST: 1
#       PAGER: cat
#     machine:
#       image: ubuntu-1604:201903-01
#     working_directory: ~/go/src/github.com/hashicorp/nomad
#   go-macos:
#     environment:
#       GIT_PAGER: cat
#       GOLANG_VERSION: 1.14
#       GOMAXPROCS: 1
#       GOPATH: /Users/distiller/go
#       GOTESTSUM_JSONFILE: /tmp/test-reports/testjsonfile.json
#       GOTESTSUM_JUNITFILE: /tmp/test-reports/results.xml
#       NOMAD_SLOW_TEST: 1
#       PAGER: cat
#     macos:
#       xcode: 11.3.1
#     working_directory: ~/go/src/github.com/hashicorp/nomad
# jobs:
#   build-binaries:
#     environment:
#       GO_TAGS: ui codegen_generated
#     executor: go
#     steps:
#     - checkout
#     - run: apt-get update; apt-get install -y sudo unzip zip
#     - run: make deps
#     - install-protoc
#     - run: ./scripts/vagrant-linux-unpriv-ui.sh
#     - run: sudo -E PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\" make prerelease
#     - run: make pkg/windows_amd64.zip pkg/linux_amd64.zip
#     - store_artifacts:
#         destination: /builds/nomad_windows_amd64.zip
#         path: pkg/windows_amd64.zip
#     - store_artifacts:
#         destination: /builds/nomad_linux_amd64.zip
#         path: pkg/linux_amd64.zip
#   build-darwin-binaries:
#     executor: go-macos
#     steps:
#     - checkout
#     - run:
#         command: echo 'export PATH=\"${GOPATH}/bin:${HOME}/goinstall/go/bin:$PATH\"'
#           >> ${BASH_ENV}
#         name: configure PATH
#     - install-golang:
#         target_directory: ~/goinstall
#     - run: source ${BASH_ENV} && make deps
#     - run: brew install protobuf
#     - run: sudo -E PATH=\"$GOPATH/bin:${HOME}/goinstall/go/bin:$PATH\" make generate-all
#         static-assets
#     - run: source ${BASH_ENV} && make pkg/darwin_amd64.zip
#     - store_artifacts:
#         destination: /builds/nomad_darwin_amd64.zip
#         path: pkg/darwin_amd64.zip
#   lint-go:
#     executor: go
#     steps:
#     - checkout
#     - run: apt-get update; apt-get install -y shellcheck sudo unzip
#     - install-protoc
#     - install-circleci-local-cli
#     - run: make deps lint-deps
#     - run: make check
#     - run: make checkscripts
#     - run:
#         command: make -C .circleci CIRCLECI=\"circleci-local-cli --skip-update-check\"
#           ci-verify
#         name: check .circleci/config.yml is up-to-date
#   test-container:
#     environment:
#       GOTEST_PKGS: << parameters.test_packages >>
#       GOTEST_PKGS_EXCLUDE: << parameters.exclude_packages >>
#       GOTESTARCH: << parameters.goarch >>
#     executor: go
#     parameters:
#       exclude_packages:
#         default: \"\"
#         type: string
#       goarch:
#         default: amd64
#         type: string
#       test_packages:
#         default: \"\"
#         type: string
#     steps:
#     - checkout
#     - run: apt-get update; apt-get install -y shellcheck sudo unzip
#     - run: make deps
#     - install-protoc
#     - install-consul
#     - install-vault
#     - run-tests
#     - store_test_results:
#         path: /tmp/test-reports
#     - store_artifacts:
#         path: /tmp/test-reports
#   test-e2e:
#     executor: go
#     steps:
#     - checkout
#     - run: apt-get update; apt-get install -y sudo unzip
#     - run:
#         command: |
#           groupadd --gid 3434 circleci
#           useradd --uid 3434 --gid circleci --shell /bin/bash --create-home circleci
#           echo 'circleci ALL=NOPASSWD: ALL' >> /etc/sudoers.d/50-circleci
#           echo 'Defaults    env_keep += \"DEBIAN_FRONTEND\"' >> /etc/sudoers.d/env_keep
#           chown -R circleci:circleci /go
#         name: prepare non-root user
#     - run: sudo -E -H -u circleci PATH=${PATH} make deps
#     - run: sudo -E -H -u circleci PATH=${PATH} make e2e-test
#   test-machine:
#     environment:
#       GOTEST_PKGS: << parameters.test_packages >>
#       GOTEST_PKGS_EXCLUDE: << parameters.exclude_packages >>
#       GOTESTARCH: << parameters.goarch >>
#     executor: << parameters.executor >>
#     parameters:
#       exclude_packages:
#         default: \"\"
#         type: string
#       executor:
#         default: go-machine-recent
#         type: string
#       goarch:
#         default: amd64
#         type: string
#       test_packages:
#         default: \"\"
#         type: string
#     steps:
#     - checkout
#     - install-golang
#     - install-protoc
#     - install-consul
#     - install-vault
#     - run:
#         command: |
#           if [ ! -z $GOTESTARCH ] && [ $GOTESTARCH == \"386\" ]; then
#             sudo apt-get update
#             sudo apt-get install -y gcc-multilib
#           else
#             echo \"Skipping 32bit lib installation while building for not 386\"
#           fi
#         name: Install 32bit gcc libs
#     - run: PATH=\"$GOPATH/bin:/usr/local/go/bin:$PATH\" make bootstrap
#     - run-tests
#     - store_test_results:
#         path: /tmp/test-reports
#     - store_artifacts:
#         path: /tmp/test-reports
#   test-ui:
#     docker:
#     - environment:
#         JOBS: 2
#       image: circleci/node:10-browsers
#     steps:
#     - checkout
#     - restore_cache:
#         keys:
#         - v1-deps-{{ checksum \"ui/yarn.lock\" }}
#         - v1-deps-
#     - run:
#         command: cd ui && yarn install
#         name: yarn install
#     - save_cache:
#         key: v1-deps-{{ checksum \"ui/yarn.lock\" }}
#         paths:
#         - ./ui/node_modules
#     - run:
#         command: cd ui && yarn run lint:js
#         name: lint:js
#     - run:
#         command: cd ui && yarn run lint:hbs
#         name: lint:hbs
#     - run:
#         command: cd ui && yarn test
#         name: Ember tests
#   website-docker-image:
#     docker:
#     - image: circleci/buildpack-deps
#     shell: /usr/bin/env bash -euo pipefail -c
#     steps:
#     - checkout
#     - setup_remote_docker
#     - run:
#         command: |
#           # There is an edge case that would cause an issue here - if dependencies are updated to an exact copy
#           # of a previous version, for example if packge-lock.json is reverted, we need to manually push the new
#           # image to the \"latest\" tag
#           # Ignore job if running an enterprise build
#           IMAGE_TAG=$(cat website/Dockerfile website/package-lock.json | sha256sum | awk '{print $1;}')
#           echo \"Using $IMAGE_TAG\"
#           if  [ \"$CIRCLE_REPOSITORY_URL\" != \"git@github.com:hashicorp/nomad.git\" ]; then
#             echo \"Not Nomad OSS Repo, not building website docker image\"
#           elif curl https://hub.docker.com/v2/repositories/hashicorp/nomad-website/tags/$IMAGE_TAG -fsL > /dev/null; then
#               echo \"Dependencies have not changed, not building a new website docker image.\"
#           else
#               cd website/
#               docker build -t hashicorp/nomad-website:$IMAGE_TAG .
#               docker tag hashicorp/nomad-website:$IMAGE_TAG hashicorp/nomad-website:latest
#               docker login -u $WEBSITE_DOCKER_USER -p $WEBSITE_DOCKER_PASS
#               docker push hashicorp/nomad-website
#           fi
#         name: Build Docker Image if Necessary
# references:
#   common_envs:
#     GIT_PAGER: cat
#     GOMAXPROCS: 1
#     GOTESTSUM_JSONFILE: /tmp/test-reports/testjsonfile.json
#     GOTESTSUM_JUNITFILE: /tmp/test-reports/results.xml
#     NOMAD_SLOW_TEST: 1
#     PAGER: cat
#   go-machine-image: circleci/classic:201808-01
#   go-machine-recent-image: ubuntu-1604:201903-01
# version: 2.1
# workflows:
#   build-test:
#     jobs:
#     - build-binaries:
#         filters:
#           branches:
#             ignore:
#             - stable-website
#             - /^.-ui\\b.*/
#   website:
#     jobs:
#     - website-docker-image:
#         context: static-sites
#         filters:
#           branches:
#             only:
#             - master